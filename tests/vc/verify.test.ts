import { expect, test } from 'vitest'
import {CredentialVerifier} from "../../src/vc/verify";

test("jwt_vc_json", async () => {
    const credentialType = "jwt_vc_json"
    const credential = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5jb20va2V5cy9mb28uandrIiwibmJmIjoxNTQxNDkzNzI0LCJpYXQiOjE1NDE0OTM3MjQsImV4cCI6MTU3MzAyOTcyMywibm9uY2UiOiI2NjAhNjM0NUZTZXIiLCJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJVbml2ZXJzaXR5RGVncmVlQ3JlZGVudGlhbCJdLCJjcmVkZW50aWFsU3ViamVjdCI6eyJuYW1lIjoiam9obiBkb2UifX19.yY3-aKU3x1nPq4qo3METJnecaZK-UWorW01J6YSUyxM"
    const credentialVerifier = new CredentialVerifier(
        credentialType,
        credential
    )
    const decoded = await credentialVerifier.getApplicationClaims()
    expect(decoded).toBeDefined()
})

test('vc+sd-jwt', async () => {
    // expect(sum(1, 2)).toBe(3)
    const credentialType = "vc+sd-jwt"
    const credential = "eyJ0eXAiOiJzZCtqd3QiLCJhbGciOiJFUzI1NiJ9.eyJpZCI6IjEyMzQiLCJfc2QiOlsiYkRUUnZtNS1Zbi1IRzdjcXBWUjVPVlJJWHNTYUJrNTdKZ2lPcV9qMVZJNCIsImV0M1VmUnlsd1ZyZlhkUEt6Zzc5aGNqRDFJdHpvUTlvQm9YUkd0TW9zRmsiLCJ6V2ZaTlMxOUF0YlJTVGJvN3NKUm4wQlpRdldSZGNob0M3VVphYkZyalk4Il0sIl9zZF9hbGciOiJzaGEtMjU2In0.n27NCtnuwytlBYtUNjgkesDP_7gN7bhaLhWNL4SWT6MaHsOjZ2ZMp987GgQRL6ZkLbJ7Cd3hlePHS84GBXPuvg~WyI1ZWI4Yzg2MjM0MDJjZjJlIiwiZmlyc3RuYW1lIiwiSm9obiJd~WyJjNWMzMWY2ZWYzNTg4MWJjIiwibGFzdG5hbWUiLCJEb2UiXQ~WyJmYTlkYTUzZWJjOTk3OThlIiwic3NuIiwiMTIzLTQ1LTY3ODkiXQ~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJpYXQiOjE3MTAwNjk3MjIsImF1ZCI6ImRpZDpleGFtcGxlOjEyMyIsIm5vbmNlIjoiazh2ZGYwbmQ2Iiwic2RfaGFzaCI6Il8tTmJWSzNmczl3VzNHaDNOUktSNEt1NmZDMUwzN0R2MFFfalBXd0ppRkUifQ.pqw2OB5IA5ya9Mxf60hE3nr2gsJEIoIlnuCa4qIisijHbwg3WzTDFmW2SuNvK_ORN0WU6RoGbJx5uYZh8k4EbA"
    const credentialVerifier = new CredentialVerifier(
       credentialType,
       credential,
    )
    const decoded = await credentialVerifier.getApplicationClaims()
    console.log(JSON.stringify(decoded))
    expect(decoded).toBeDefined()
})

test("vc+sd-jwt2", async () => {
    const credentialType = "vc+sd-jwt"
    const credential="eyJ0eXAiOiJzZCtqd3QiLCJhbGciOiJFUzI1NiJ9.eyJfc2QiOlsiLWhkdFNSdURIT2NVcXVmejkzU3hLSlN4VVRMa0pRNlI5dDhjUFlUOVgzRSIsIjByay1EUEtyc0xmRjN3RlVpRkNpZUItakNQWWV5V25oZExnQktGS2J6VmsiLCI0bWctWVN0dEIwZEhQUDVxQjhYMG5FWEo0NGZYZ1VuR0hLaDhJdzNJMnk4IiwiQl9ZR2xrSGtmVHF6QnNTdC13bGw4Q3ZDZlQ4TWgzOU5oUk9aNDk3UHZsVSIsIkV0eGhPOW9QMi1nZE5KdDV3ZzRmWFBKcVRPYlZnUTJ5c2pjYWZoMm50MFUiLCJHWWFyQ2xDVGw5TURjV21OYmhlOXBEZEVaLXpwd1FxXy1LY1dQVlp2eGJrIiwiSUFYc2ZFTmNmTEFqamVsdUhMUzhna1ZKdXV3WDlEU0puakVFV0ZuUmJQOCIsIlJBQkdJWkdGMnJ6QTBaVEs4dXFHWEVDOGlLWXpMcnRFNktrLWFGYWphbFUiLCJmcExINzhadnM3b1pXSHJDeGl1N3BEd3BQb09aai1XeEhNVHFTVlNNUUg0Iiwib1ZDQ0ZnMkJPOG9XZzdwWnhKeEdxYWZYTzRFY1RFbFdwOWNIeTRyZF9JZyIsIng5cWh6R1NsMEFKcENxQ192dXM2cnl3eGJjMHR4cVpRY2pTOFQ5RXFGVTAiLCJ6cmMyUnNGdWZmNlRwZzFWUVU5QlNvTlRYVEtObXI4MUg1QzlQdDVMbVdzIl0sIl9zZF9hbGciOiJTSEEtMjU2In0.G016ZLr_vgqpnAMRUBF2lC4mi6SbTkvW_-_yCJbg4b64FbYXSS2nwVB3pDZLFI9tCRG5lNO_F31c19vm5nozEw~WyJkYjUwZWRmN2M1Y2U1YzlmIiwiZ2l2ZW5fbmFtZSIsIkpvaG4iXQ~WyI3MTQ0Y2I2ZjllMGM0YjFhIiwiZmFtaWx5X25hbWUiLCJEb2UiXQ~WyJhMTMwZjdiZWVhY2MwZTViIiwicG9ydHJhaXQiLCJkYXRhOmltYWdlL2pwZWc7YmFzZTY0LC85ai80QUFRU2taSlJnQUJBUUFBQVFBQkFBRC8yd0NFQUFVRUJBUUVBd1VFQkFRR0JRVUdDQTBJQ0FjSENCQUxEQWtORXhBVUV4SVFFaElVRngwWkZCWWNGaElTR2lNYUhCNGZJU0VoRkJra0p5UWdKaDBnSVNBQkJRWUdDQWNJRHdnSUR5QVZFaFVnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lQL0FBQkVJQUlBQWdBTUJFUUFDRVFFREVRSC94QUNQQUFBQkJRRUJBUUFBQUFBQUFBQUFBQUFIQWdNRUJRWUlBUUFRQUFFREF3TURBZ01GQmdRSEFBQUFBQUVDQXdRQUJSRUdFaUVUTVVFSFVSUmhjU0tCa2FHeEl5UXlRbExCQ0JWeW9qTkRZb0xSNGZFQkFBSURBUUVBQUFBQUFBQUFBQUFBQUFBRUFRSURCUVlSQVFBQ0FnSUNBd0FEQVFFQUFBQUFBQUFCQWdNUkJCSWhNUk1pTWhSQlFpTlIvOW9BREFNQkFBSVJBeEVBUHdDMlEwY1VpMVBKYW9CNUxQeU5BT0JrOGVhQVYwTVVCNzBxQVQwd1RqOHFqcnRQcFRYYlVOaXNtNFhLNU5NclNOeGI3ci9BYzFwV2xtYzNaS1Q2cmFUYVh0WStNZkhsU1dkb0g0blA1VnIvQUI1VStaRVo5VnJFOHZhWXp5Znk1OXM5cW4rT1BtYXUwMzIxWHRHSVQrWE51NHRxeHVBL3ZXRnNVMGFSZFlyWndhcDdTamxyNUNwU1lXMFI0b0NLNDFWbFVWYmVEVmcycUdmTlp0RDZHZU8xQVBJYTVBb0J3TkdnRkJyNVVMYVFicGNyYlpZU3BsMG1zeEdVak81eFFCUHlBN2svU3BpR1V5QldzUFZhYmRpdUhZQTVCaURJNng0ZFdQdS9ocDdIeHRGYjVBMFc0NjZ2ZTQ0cHhSOHFKSnB1SXJVdkY1bDcweVVidmFwM0EwUVVFVWJHbG5hYmhOdGt0RWlHOHB0eEJ5Z2c5aldWcVJacFN6b25URjZiMUZaVzVnMnBlU0FIVUR3ZmV1YmxyME8wV3ltdWNWa3NqcmFxUWlyYTRQRkFRM0dxc0c2U3pWVnp5V2FBZVN6UUN3MXgyb0RMYTQxWkQwZFlETGQvYVMzOHR4V1J3VnJ4MytRSGsxcFhIM2xUSmR5L2ViM2M3L1BYT3VzcGI3eWp4azhJSHNCNEZkU3RZckRuMnNya3A5elZsRGdiTzRFSnFxM1NUcUVrcjI3Y2dnais5Uk13dFdMUFZNS0tzN0NCUkUxVzZXS0NDbEdRazl4NG8zV0VkTE4vNlozWlRWOVZBSklSS1FvRkk4cUE0cFRQdVk4R3NjeFgyT1JhK3pqdlNUWFJoYlhIYXBWMGlMYW9TaE90ZCtLQTN5V2NEZ1VMblF6aWdIQTFpZ0ZCdWdPWGZXSzZ1ei9VU1RFTG1Xb0tFc0lUakJUNVYrSnJvOGFOUnNqbGtQQWtuZ0RrK0tZM3VTMVkydG9OdUN5Ti9QdldOcmFPMHh0WmFkT3g1YTBncEdEeDlhU3ZubUhScHg0bHRiZG9HMHFVamV5dGE4NStYMHBLMmV4eXZGcTFMZnBqYVpMWU96cHEya0FkKzlVL2tXV25CVkpZOUpyVXd3NmgxQ0hGT2pCUHNQR0tyT2UwU2o0SzJDRFdHa2Jub083SXVkdWRVMjJGa0ljOG95SzZtSE5Gbzh1WHlPUE1lbWw5TnRkdjNhZWJMYytYTmhVMjZDbzV4eVFvRW1yWk1laTJPK3hUVzN4eFNobEVjYTcxS2lFNjFRQkNERlF1V0dhQVgwalFIM1NvRGpyMU9KUHFiZmVWazljL3gxMWVQNmMvTXp0dmo5VjhGWFlkNm04b3cxYXFISFRrREhudlNjMmRTbFc0MC9HL2VrcklPQU8zdlNXU3pwWW9GTzFSRXJlYkpTQmdkcVROUzJjWnRBY0NHeHdCNHFHTXJCdGdxRzRqaXA2cXhMSzZ3MDJ6cUxUa3kzUGdiMW9JUXIyUGcxZWx0U3BldTRjbmFXK0xzdnFMQVNsbGFuMkpYU1UyRGdxNUlVbjVudnhYZXRQYkU4L0ZlbVIxSVcwbElLUDRTTWpqRmMyZnliLzBqdU4xQVFuVytLc3FJL1IvU3BYZkJyaWdGQnFnUE9uNXgyb0RqYjFWanRzK3F0OVpaUnNBZUI4OGtwQko1OXlhNldEMFF5S2UwUkhEKzAyL1o3Vm5rbnlZd1ZhYUlsS01iaUJTMHc2Rlc2c0phNmphZDRCSnlBZk5KWGc3amtXTFhILzRTazRQR1NhV01MbjRub3lBQm5udWFHYTdZYzNJR0RtclJPMlV3WmxJeWsxV1ZxdVROZTJveHZXcERjSnJEa21XeTZnY2pLaW9WMmNGdTJGeHVYWHJsZEVMUnlhVGhLSzQzVXJJampkV1ZFcnBWWlY5MDhVQjUwaFFsNFc4MEJ5ZDYwQzF6UFV4MlRiWlFlSmFRM0tBUVJzZGIreVJ5T2VBT1JUV0szaGxiSDVVdlRiaVFrSjRUdFRXVm8zSnVuaUVHTmJyMWVBNC9HS0lzVkhkMTFXMGZXdGQ5ZlN2eDVMZTVKVEZ2c1ZZY2gzdU5KY1Ivd0F0bDRGZVBrRDNvOFcvVE9hWmErcEYvd0JNOVpYR1V2NEM1ZzlSQk5jM1BqMUxxNGI3cDFGT1hJYlZ0WHR3UnpnbnZTdjZieEhXb2JPYXI5VDM3bVhMVll1dkZ5VWh0VGUzQXp3ZHhVTzlPMHg0ZEZ0NVk5dEZiZGRYeUpLYWo2c3NMOEJsMGhIWDdvYlB1VFdGcVJ2d3ZUZjlxKzkyVmlYNjNXZWFRRmxxR3FRUGJLY2dIOFNLWXdUcXVpbklydWR0c3RGRWV5Nk10RkNFUnhIZWdDWDB2R0syVWVkTVVCNXM0b1E4Q01xSEdPYUV3NVUxdEVZdVdzNXFpUjhWOFk0Vko4bEFXcm43c0NpazZoMEw0NFZZdDRtRlNUakE5NnJGL0krUHdoWHFKUGt4bWJaRlVVb0tpVkRQQlBqTlhwYnA3VXZodGY4QU1pSHBQVEdtR2ZUcHkyM2hoMmJkQ0ZPSWM2WVNVckp5QWxSUFlWamx5N242dE1YRm12NmtQMnBNM1Qycm13bFpUc1dOeVNvS0lHZmNWcFAzcXIrTW1uVGJDVVNOTGlkRVpEMG5wYndrL3dBeHh3Qm11ZHJWajI5eXlQcDVwYS82bG4zZWZyNmEvRmJ5RXcyR1hTbmI1Skcwa1k4WUlwdi9BSmE4Rkx4bGkzbHBZTm1rdXMzR3dYVlJteEVyS1dIbHBPU1BCNThqOHFWM08vQnFhNnI1SmNzcVdkV1I1ZThrUjdZV0I0eWVxTy8zQ3IxblRDOWQxVFZvNHBoekk5b3kwVUpSVm9vQW1iTWVLWVpFN1BGQUpLT2ZuVUxFN09lT0Q0cW9oeU03YnJqQjEvTGozcktwUlU4VUtDc2hSeWNrbWlaZERleTRhMUluTFJ4ak5aVERTcldSb0RDa2RkQ0Vra2NnaWw1a3pTQ0o4cCtMRVBRWUFLZXlsbmo3aDVxYXRMU0ZNdDM5L1d0U3R6cTE3bEUrVFQydnE1Y3o5blZHZ3BETXJTVUpwdzd6MHh1cm5YOW4vd0RMWndUR2lFbk96L3E3ZmpVMVV2T3pyampUcXl0QXo4NkxNb2hTVFVwTW9xN0syNFBIaXJZMU0wb0swMHhKR0VaYWVLZ0lxMFVBVFNpbW1SQlRRQ1NuZ1ZBSXh3UmlxZ0UvVlRTOGhuVXNiVTdJUVlxeUVMOEtTN3R4ejdnZ1ZRMWprTUY0UmNWY1lDaUR4VlRrTnZaVWRSS1VkeFNkenRYbXRXbklPblhuSXlBdDRvT1BlcHhzN3lDTU4xcU0vRW1Ta0Y4T1BEZWtEY1JqazVIaXVwUDVjcmYyZFFhUzFmQWx4WWtWeUdZYmtvcVRFQlFRbFNXOFpPY1lIY2NHdVZmMjYwUjlXNGJlRHIyMVl3cng3R3FSTE9ZV0tFYlVWcERLWjBwSlJDN2k4Qi9LbElQMzVOYVl5K1dVWlkvV3Q1S3dqTEhlcWhHY0hlZ0NjVTk2YlpFN2VLQWIyaW9CRzJvREZlcHNJeTlDU1NuZ3NyUTRUZ25Bemc5cW8wcExtVDRzcCt5c1pVa2tEeHdEeFZkSElzMDlzdnlZa1J1UW9rZ2p0bnZTMXNaeWw5S3ZVT3RKRXB3d1dXUXRhMDVDdVNjVnJpd3NzbVpZYUowdkRsM1ZGenVxbXdRUVVJNHprVk9WZkZpMk5kdWlTbW9EWlJHYmRVeXRTa29WZ2NlQ1BZNHBJeGFiVVd0dnU4Q2ErcGpKYWt0cTJxYldNRUdqV21Vcnd2QU5rWkdhdHRsTE94WFRKZG1QbkcxVDZrb0lQZEtRQitvTk1VZ2xta3RRclNXUDlJNngzb0NNc1VBVDhVeXdJS1JRQ0NLaFkyUlFGVmZyY202NmZuVzVRSDdkbFNVNUdjS3h3Znh4VlUxbHhsY3NOejMyVk9EcXRxd3BHZkl5S3RwdnM3Ym5vNlcwcG5GUlNEa0JKLzhBUGVzN3Q4ZHRrVDdWRW1YQmNpTXR4SVVBU29LSUo0OXFtbDlMMng3YWZUTVBUekRKL3dBM25PSlFEazVjVUNQd05MNURtSy9RWWJCRTAvY0l5SExUZVppczlpbVNUNDlqU3plMmF0bjBuVFVtTHE2UGZHcmpKZVp3bEx6VHBCN2VVNEg1VlMwbDVYdHh2RFVmZXBZS1VwSEdlQWYvQUtlS21rYlpTY3RzUlVPMU1NT0REZ1R1V1BaUk9UK1pwN1RuWG5jbmxpaFdVZFk3MEJHY0hlZ0NlUlRiRTNqL0FOVUFnOGlxb05rVUxRUVJsV0IzcUk4aWZFdVJQVyt6Q3grb1V0OWhBRVdmdGZHemdvZEkrMmsvVWdtclVUTStBdU4zZFFvZ0tPTUR0eCtOTWZHcE9aZjZadkNFeTIyNVJMaVNvY0Ewcmt4bThPY1VZOXJzK29laVN6MDQ2Q2Q0VDlray9XdWZ1YXVyRVJjU2RNdFdtejI3RVpycElLU29LV0JqQU9CV2MvWWRZcXBienJGVEZ6VEdqeUNxUWtuZzVDU09SOS9INTRvclNaOFN4bThWU2RPSmUxVGRFM2FVay9Bd1Y1UmtmWmZkeDNCOHBUK3RNMXh4VW5selRiMDNpdTVyUXVZV0txdEJoWXFVSXkvTkFFNDg4MDJ4TjBBMmZidFZVSTB1VkhoUTM1a3Q1REVlT2hUcnJxemhLRUpCSlVma0FDYWxMakQxSTlkTlRhcnViOEt3VG43TllRU2h0REJMYno2ZTI5eFk1R2Y2QVFCVGRNWGduYkx1VlhZR2x6ZlQ3NFNYbFpXODZ0SmNKSklPTUt5ZWUrZWFUdjhBV1hVdzA3Vll1NFFub3J5bTNBZVBOT1V2c2hreHpDS3crdHB3WUo0N0VWYTFZbGxTMHcyZG4xcElnTnJiS2pzV2tEaFdEOWFUdHg0czZWT1YxYUJyMVNuQ0doaE1kWFVRZ0pIVDdZQnprL1BqRlp4eDRxMXR5WnNuYUkwN2ZOZDM4VHAwcDJMYm1qbHh4QlBuK1JHZkp4eWZBcU12V3M2aEdPdHJWMnVkRCt0ekZ0dWgwdnFXTXl4YldIbHNScHJDTUJsQVdRa09wSEJIdXNWck9IdlhaTDVZcmJUb0RjbFNRcEpDa2taQkJ5Q0Q1RkttSU1yTlZXZ3dxaENNdWdDY2FjMngwYUp3S3FobXRVYTMwcm8yS0g5U1hxUEFLaGxEUk81MXovUzJuS2o5Y1lxMFVSM2N3ZXJmcnFOWjJwZW5OTU1TWVZwY1A3MCsvZ0xsZ2RrN1JuWWltYVkyRnJnVWtBckdmZXRwOU1OZllVZFB2OWFDMkJ3a29ISHRnWS90WEx6UTcyQ2QxVzcrbjAzQ09vcFFDb2RzaXNxNU5OTDR0c1hMMHN0cVdXVklMYXhUZGN4QzNIYU93K2xzdTdyNG5Ga2ZORzZxVHlsNDRnbVdiMFdzOXRBZm52dlRuUG1OclpQekZLWDVFeVpwZ2lCUnRWdGoydTFvWWpNb2FiUUR0U2xPQUtVbWZ0czVYWFhxNC84QVVuU0owbHJCNXBzbGNTWG1ReVZkd0ZLSktUOURYY3daTjEwNFBKdy9GYnNMWHBiNnZXS0xwYUhwN1ZNNWNTVkUvWXN5WEVFdExhL2tDbERPMHBGVnk0NVVwbEd4aVZIbVJVUzRjaHFUSGNHVU90TEMwS0h5STROSmFtRFVYMlNzMUdsa2RabzFDUEx6VVBydDZhV0VPSUYrRjJmUngwYmFndmY3K0VmN3E2RVVLemNCZFovNGtkV1h2ZkcwdXlOT3d2NnhoMlNmKzhqQ1B1RmJSalpUa0JPWk5tWEdhN05ueW5wY3AwNVc4K3NyV3MvTlI1TmFWb3l0S0tUVnBuU2o0R2lGb2x2ZEVTa3JiZVljVU1KSTUvcEovc2YxcERQRHA4Tyt4ZXNqSUNrdHFSbmQ1SDk2NWRvMDdGTGJXRjIweXpLU0hRMmhaVDRJb3JJdEVMWFRGbVhEZlMrd3BhQWY0a0U1R2FyYVVRSUlaVThsUFVCeVBHYXBFYlZsTGNhMnBTZ1krbFcwaXY4QTY1ay94RVM0cDFKYXJjMFFYMkdWTGMrUVVhNnZDcnR6ZWJmdjRCVVYwcHRFdVQ2WEZnMVhxSFREL1dzZDJmaDVPVk5wT1cxLzZrSDdKL0NzcHh4SzljZ3hhZDlmMjE3R05WV25aNE1xRCtwYk5LMndhTTF6aTFaOVEyWFVVTDR5eTNKaWExNTZaKzBnK3lrbmxKK29wTzFKZzNXOFMvL1oiXQ~WyJhNWQ4YjI0NTg2MmI3OWExIiwidGl0bGUiLCLmnKzpg6jplbciXQ~WyJhYWYxNzgzYWQ5NjlkY2ZjIiwib3JnYW5pemF0aW9uX25hbWUiLCLmoKrlvI_kvJrnpL5FeGFtcGxlIl0~WyI2MDExN2YzMTliZGFlYTZkIiwib3JnYW5pemF0aW9uX3VuaXRfbmFtZSIsIua8lOWKh-acrOmDqCJd~WyI1YWJiODI3NmZjMWQ0ZDZlIiwib3JnYW5pemF0aW9uX2NvdW50cnkiLCLml6XmnKwiXQ~WyIyYWFiN2Q1MjM3ZDFmZTJmIiwib3JnYW5pemF0aW9uX3N0YXRlX3Byb3ZpbmNlIiwi5p2x5Lqs6YO9Il0~WyJlMzE3NTE0MmJmZDEzZWQ4Iiwib3JnYW5pemF0aW9uX2xvY2FsaXR5Iiwi5paw5a6_5Yy6Il0~WyJjYjE3MDcwNDk3NjA5ZjE0Iiwib3JnYW5pemF0aW9uX2J1c2luZXNzX2NhdGVnb3J5IiwiUHJpdmF0ZSBPcmdhbml6YXRpb24iXQ~WyIyYzE4YmRkMzdhZmRlZTI0Iiwib3JnYW5pemF0aW9uX3NlcmlhbF9udW1iZXIiLCIwMTEwIDAxIDExMjc5NCJd~WyI1MDAwMDM3MzM1ZGZiYWY3Iiwib3JnYW5pemF0aW9uX3VybCIsImh0dHBzOi8vZXhhbXBsZS5jb20vIl0~"
    const credentialVerifier = new CredentialVerifier(
        credentialType,
        credential
    )
    const decoded = await credentialVerifier.getApplicationClaims()
    console.log(JSON.stringify(decoded))
    expect(decoded).toBeDefined()
})

test("production sd-jwt", async () => {
    const credentialType = "vc+sd-jwt"
    const credential = "eyJ0eXAiOiJzZCtqd3QiLCJhbGciOiJFUzI1NiIsIng1YyI6WyJNSUlFNFRDQ0JHYWdBd0lCQWdJTU9mVDlRaHozZHVPT1ZjdkxNQW9HQ0NxR1NNNDlCQU1ETUZBeEN6QUpCZ05WQkFZVEFrSkZNUmt3RndZRFZRUUtFeEJIYkc5aVlXeFRhV2R1SUc1MkxYTmhNU1l3SkFZRFZRUURFeDFIYkc5aVlXeFRhV2R1SUVWRFF5QlBWaUJUVTB3Z1EwRWdNakF4T0RBZUZ3MHlOREV4TWpVd05qQTVNekphRncweU5URXlNamN3TmpBNU16RmFNR2d4Q3pBSkJnTlZCQVlUQWtwUU1RNHdEQVlEVlFRSURBVlViMnQ1YnpFVU1CSUdBMVVFQnd3TFUyaHBibXAxYTNVdGEzVXhGakFVQmdOVkJBb01EVVJoZEdGVGFXZHVJRWx1WXk0eEd6QVpCZ05WQkFNTUVtbHpjM1ZsY2k1a1lYUmhjMmxuYmk1cWNEQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJHZStiZ3kyN1Mrc3pWd0k0RVlkaWcvWVVlZDVET1BVTFBPZWN1OXYwSDZ4MyszVWtzaUJZcU5KUy9JQzZnNE14bjg4a2wva0lFc25rNUE2VUZtOHVtbWpnZ01NTUlJRENEQU9CZ05WSFE4QkFmOEVCQU1DQjRBd0RBWURWUjBUQVFIL0JBSXdBRENCamdZSUt3WUJCUVVIQVFFRWdZRXdmekJFQmdnckJnRUZCUWN3QW9ZNGFIUjBjRG92TDNObFkzVnlaUzVuYkc5aVlXeHphV2R1TG1OdmJTOWpZV05sY25RdlozTmxZMk52ZG5OemJHTmhNakF4T0M1amNuUXdOd1lJS3dZQkJRVUhNQUdHSzJoMGRIQTZMeTl2WTNOd0xtZHNiMkpoYkhOcFoyNHVZMjl0TDJkelpXTmpiM1p6YzJ4allUSXdNVGd3VmdZRFZSMGdCRTh3VFRCQkJna3JCZ0VFQWFBeUFSUXdOREF5QmdnckJnRUZCUWNDQVJZbWFIUjBjSE02THk5M2QzY3VaMnh2WW1Gc2MybG5iaTVqYjIwdmNtVndiM05wZEc5eWVTOHdDQVlHWjRFTUFRSUNNQjBHQTFVZEVRUVdNQlNDRW1semMzVmxjaTVrWVhSaGMybG5iaTVxY0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdId1lEVlIwakJCZ3dGb0FVV0h1T2RTcitZWUNxa0VBQnJ0Ym9CMFp1UDBnd0hRWURWUjBPQkJZRUZKNlVJeEVSRWZOS09YUUFwNUkrcUVwditqV3lNSUlCZndZS0t3WUJCQUhXZVFJRUFnU0NBVzhFZ2dGckFXa0Fkd0FhQlA5SjBGUWRRSy8yb01PLzhkakVaeTlPN080alFHaVlheGRBTHR5SmZRQUFBWk5oOElwWEFBQUVBd0JJTUVZQ0lRRElheUF3THFmVFlDQ21zV2dEZy9rRW5BdUNKblZ5U01zZGlZdG1LZVNtY2dJaEFQWUFhQSswY0kvQVNyS1RTOE1YWElrN29KY1g4YUxBWEFUT0tRWHhwM0tFQUhZQUV2Rk9OTDFUY2t5RUJobkRqejk2RS9qbnRXS0hpSnh0TUFXRTYrV0dKam9BQUFHVFlmQ0tyZ0FBQkFNQVJ6QkZBaUVBcW1OM0NFQld1Vk1oang0TEh3bVAwdWw2a0hKWkhXNzRVVDQ5M2lwRXE2SUNJQytHMkpxTGltZnpnbkpuR3JlelVUbUhpNWFKU3VqK0phcmFSNk02Wk51aEFIWUFEZUh5TUN2VERjRkFZaElKNmxVdS9FZDBmTEhYNlREdkRrSWV0SDVPcWpRQUFBR1RZZkNIcXdBQUJBTUFSekJGQWlFQTQydWRrSk5ucE5IL25wWGhCZzJvWGdnd2tkM2Q3a2huYlZXUmVzd1g1aE1DSUVtMDMyeUwxRE5pVzRYS2VRWjNjM0NtRE5UV0J5WmFwNk5OOXpXMWttQi9NQW9HQ0NxR1NNNDlCQU1EQTJrQU1HWUNNUUN5Wnd3Q1FncjNWalpURlUwdE94KzA5Ync0aUxSS2JPVUpqd2FtMHNOUWd3Nkw1c2tJSTkzT1dOU0xwOWRuUUkwQ01RQ3dpU3hiSDhDQ3Vzc3RNa0hvQVFvSmQxT1hYdCtQcmtuc2NYWWM4TkVXcEwzRXFQSG1lb0tjSGJoeU1vWXJRd1U9IiwiTUlJREFqQ0NBb21nQXdJQkFnSU5BZTVmSXBWQ1NRWDVBWkdvM0RBS0JnZ3Foa2pPUFFRREF6QlFNU1F3SWdZRFZRUUxFeHRIYkc5aVlXeFRhV2R1SUVWRFF5QlNiMjkwSUVOQklDMGdValV4RXpBUkJnTlZCQW9UQ2tkc2IySmhiRk5wWjI0eEV6QVJCZ05WQkFNVENrZHNiMkpoYkZOcFoyNHdIaGNOTVRneE1USXhNREF3TURBd1doY05Namd4TVRJeE1EQXdNREF3V2pCUU1Rc3dDUVlEVlFRR0V3SkNSVEVaTUJjR0ExVUVDaE1RUjJ4dlltRnNVMmxuYmlCdWRpMXpZVEVtTUNRR0ExVUVBeE1kUjJ4dlltRnNVMmxuYmlCRlEwTWdUMVlnVTFOTUlFTkJJREl3TVRnd2RqQVFCZ2NxaGtqT1BRSUJCZ1VyZ1FRQUlnTmlBQVREb1JHTlpTUGhsdUc3cTZiUUExMVBUZTBaRC94eDQ0UWxGYW0xQk00ZUxlTit3Zmd3YWxzYmtqekFSQ005c2kvZm5RZUtOdEtBbGdObU5PSFRtVjNWZndHYm9jajYrMjJIVldadVZlWC9WZUlHb1doMXU3TGphL05ERTdSc1hhQ2pnZ0VwTUlJQkpUQU9CZ05WSFE4QkFmOEVCQU1DQVlZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFEQWRCZ05WSFE0RUZnUVVXSHVPZFNyK1lZQ3FrRUFCcnRib0IwWnVQMGd3SHdZRFZSMGpCQmd3Rm9BVVBlWXBTSnZxQjhvaFJFb20zbTdlMG9QUW4xa3dQZ1lJS3dZQkJRVUhBUUVFTWpBd01DNEdDQ3NHQVFVRkJ6QUJoaUpvZEhSd09pOHZiMk56Y0RJdVoyeHZZbUZzYzJsbmJpNWpiMjB2Y205dmRISTFNRFlHQTFVZEh3UXZNQzB3SzZBcG9DZUdKV2gwZEhBNkx5OWpjbXd1WjJ4dlltRnNjMmxuYmk1amIyMHZjbTl2ZEMxeU5TNWpjbXd3UndZRFZSMGdCRUF3UGpBOEJnUlZIU0FBTURRd01nWUlLd1lCQlFVSEFnRVdKbWgwZEhCek9pOHZkM2QzTG1kc2IySmhiSE5wWjI0dVkyOXRMM0psY0c5emFYUnZjbmt2TUFvR0NDcUdTTTQ5QkFNREEyY0FNR1FDTUM0bHpaR1F3NW1wTlpCbXp0cThodXhLZjkvdFJVSjV5TEk0cTZZVStpMmZqRjJGUkJOQTY0RUJtbGpBN2RrU093SXdMOXFZQjBBUGhzTG1WMExoa25yekhaVnZ0cXpnN05RYUlWMThCRUlEWlFnSzNnanhZekFEakhTSDV1azRtQ2RXIl19.eyJjbmYiOnsiandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJhbGciOiJFUzI1NiIsInkiOiJYeWhVM1h3V2sxNnBhZ2RiWk5hUi1tLThWNHNuTy1lUWxHbDJpdDdVOWpvIiwieCI6IllJdE1ZZDhjS3hkdUJVX0F6RnU4V2Vqc1hKRzNQNExhUU5PdC1TbTZVMUUifX0sInZjdCI6Ik9yZ2FuaXphdGlvbmFsQWZmaWxpYXRpb25DZXJ0aWZpY2F0ZSIsImlzcyI6Imh0dHBzOi8vaXNzdWVyLmRhdGFzaWduLmpwIiwiaWF0IjoxNzM0MDY2MDM0LCJleHAiOjE3NjU2MDIwMzQsIl9zZCI6WyJYZXBkM2dRWm92cERQYXNwS1IxVTZzR0l2SGZSVlNGeWVKaWo0SlRlWlk4Iiwia3F1b19jdTJSVFNwRTFQcHRJLVpfaGJiSnBfTnNBM3dBNDdWSi11RFV6MCIsIks2WllacjJMS2NCTXI4b2NpT05qZTFxaFZPM0N4bFBKUmM3MFFvV1E4VE0iLCI2UkdEZmVxU2N0YVRrNmN3ZEY5cGhPMlJPd2JzQjNnOEIwNDktOHJqUW5nIiwiSmFoNHhmMWZKOVJVdEs0TmRBRUNWTnZPdEJDTFlwRDJUVDM4a1BSTW1vUSIsIjdqUWpTZ3RhOXUwOUE4YlMtMGRjV1RNQ1pCRm9Fa3BLTWZVVDc4bUdsMk0iLCJQYVNfSmNvYnMwa2FwSUdYUFc4M3Y0ajYwTERuTGttU3E1TkFoQ010Z1JNIiwibFdCMWd3V2psWWxpYjNSczRhT3hmbkhGZnNEcEswOThvTEpZZWRxOWZNRSIsIl9IRTdMbkhCamF4OGk0NXhhYU5GS0ZOUWFTdXRweDNVVVBrM1Z5X0MyaW8iLCJra1NSRi13eV9qSXNzU2l5b05rRTV6MWNmaGtCVlk4MjBnN2NyaUxOd01zIiwiTzB5MUpxYVBjc1l6UG1DQjdNbkI3T0Y0VVJCVjVXTmlGa3BjNWU3TlVfdyIsIi1XWmd6ZUY2TWJOQklfRFZfQlNRM201OTBmd3AwMU9zbWtHSEJtZjdsNkkiLCJPUXNhclJBaFRkOTVsRnhKYXROeURiWF83RUI5M2VKTGE4Vm5mM2FfYk5BIiwiamhmSEZFekJyeldTR0tFak01RnF6bTk0TEdOc2JLVFlmSkJ3eVF4cjFlMCIsInJzeEM3bnBuUjlqOUxjdF8wNG5DSWkzb0RrQ0IxalIzQUZhSTc4X2RPamMiLCJjYXl2bWg4cnQ4aGhYWHVydnBMbEotVnBFbkZjZFZNMDV2VndOc1Q0c3NVIiwici1CUzYxSHgtaGFVcWZWN1hJRF96V1NkWDhpUzlsSzhqTktCcmlfcUpKVSIsInRyOVZ6NkNUNzNDU1g2MWktVm5hS1FTYVBPTXhCdzZ4aXJuRmoxSmxWdXMiLCJybDBwdVAxdE9XeWtlX1NoVUtHM2JJREpocEZWMU9rTTROQkdmWmdnLWRBIl19.jMaQxrZHEYrwLBktkvLMjt3oY0R9t2mNe8AOVRUJUW9QaLntAgivO9KLkOYcVf7oOBsbgs1nmHpZeRWwnC-shA~WyJVamhNcEFTM3RQYU5laXFUIiwiZmFtaWx5X25hbWUiLCJUZXN0IEZhbWlseSBOYW1lIl0~WyJkY2FhZDVqZWROUnh6R1RJIiwib3JnYW5pemF0aW9uX25hbWUiLCJEYXRhU2lnbiBJbmMuIl0~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJpYXQiOjE3MzQwNzE0MTUsIl9zZF9oYXNoIjoiQzVTZWZEMm5YVVBXbDdSTmpBaGU5NFlvTFhPckpicl80c2V0OGJFT2lhTSIsIm5vbmNlIjoiNTNkZjFkOTctM2MwNi00YzQ1LWJiY2ItMzBjZmJlODZkOWM5IiwiYXVkIjoiaHR0cHM6XC9cL3ZlcmlmaWVyLmRldmVsb3AuYm9vbGNoZWNrLmNvbVwvcmVzcG9uc2VzIn0.cpvmwNWX7rNYJtxrmCY63HOynyQ3LgWTAp15eA7dDvDzsD0GjUOW1SWv4XP6r8AHsr_Hx18WxCBKnh3bN__Apw"
    const credentialVerifier = new CredentialVerifier(
        credentialType,
        credential
    )
    expect(credentialVerifier.verify()).toEqual("valid")
    expect(await credentialVerifier.getApplicationClaims()).toEqual({
        family_name: "Test Family Name",
        organization_name: "DataSign Inc."
    })

    expect(await credentialVerifier.getIssuerInfo()).toBeDefined()
})